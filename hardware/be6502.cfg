# Configuration for Ben Eater 6502 computer
# See: https://eater.net/6502
# Based on: https://cc65.github.io/doc/customizing.html
#

SYMBOLS {
   # Max stack size, needed to compute heap boundary (malloc).
    __STACKSIZE__: type = weak, value = $0100; # 1 page stack
}
MEMORY {
    # hex100 = dec256, so 256 bytes should be enough for anyone!
    ZP:       file = "", start = $0000, size = $0100, type = rw, define = yes;
    # Stack is defined automatically:
    # CPUSTACK: file = "", start = $0100, size = $0100, type = rw, define = yes;
    RAM:      file = "", start = $0200, size = $3E00, type = rw, define = yes;
    # Fill empty space with NOPs
    ROM:      file = %O, start = $8000, size = $8000, fill = yes, fillval = $EA, define = yes;
}
SEGMENTS {
    # Data in page 0, defined by ZP as starting at $0 with length $100
    ZEROPAGE: load = ZP,             type = zp,  define   = yes;
    # Initialized data that can be modified by the program, stored in RAM
    DATA:     load = ROM, run = RAM, type = rw,  define   = yes;
    # Uninitialized data stored in RAM (used for variable storage)
    BSS:      load = RAM,            type = bss, define   = yes;
    # Uninitialized C-level heap storage in RAM, optional
    HEAP:     load = RAM,            type = bss, optional = yes;
    # The program initialization code, stored in ROM
    STARTUP:  load = ROM,            type = ro;
    # The code run once to initialize the system, stored in ROM
    ONCE:     load = ROM,            type = ro,  optional = yes;
    # The program code, stored in ROM
    CODE:     load = ROM,            type = ro,  define   = yes;
    # Initialized data that cannot be modified by the program, stored in ROM
    RODATA:   load = ROM,            type = ro,  define   = yes;
    # The interrupt vector table, stored in ROM at location $FFFA
    VECTORS:  load = ROM,            type = ro,  start    = $FFFA;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
}
